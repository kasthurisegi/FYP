{"ast":null,"code":"import View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar HomeScreen = function HomeScreen() {\n  var Tab = createBottomTabNavigator();\n  return _jsx(View, {\n    style: {\n      flexDirection: 'row'\n    },\n    children: state.routes.map(function (route, index) {\n      var options = descriptors[route.key].options;\n      var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n      var isFocused = state.index === index;\n\n      var onPress = function onPress() {\n        var event = navigation.emit({\n          type: 'tabPress',\n          target: route.key,\n          canPreventDefault: true\n        });\n\n        if (!isFocused && !event.defaultPrevented) {\n          navigation.navigate({\n            name: route.name,\n            merge: true\n          });\n        }\n      };\n\n      var onLongPress = function onLongPress() {\n        navigation.emit({\n          type: 'tabLongPress',\n          target: route.key\n        });\n      };\n\n      return _jsx(TouchableOpacity, {\n        accessibilityRole: \"button\",\n        accessibilityState: isFocused ? {\n          selected: true\n        } : {},\n        accessibilityLabel: options.tabBarAccessibilityLabel,\n        testID: options.tabBarTestID,\n        onPress: onPress,\n        onLongPress: onLongPress,\n        style: {\n          flex: 1\n        },\n        children: _jsx(Text, {\n          style: {\n            color: isFocused ? '#673ab7' : '#222'\n          },\n          children: label\n        })\n      });\n    })\n  });\n};\n\nexport default HomeScreen;","map":{"version":3,"names":["React","createBottomTabNavigator","HomeScreen","Tab","flexDirection","state","routes","map","route","index","options","descriptors","key","label","tabBarLabel","undefined","title","name","isFocused","onPress","event","navigation","emit","type","target","canPreventDefault","defaultPrevented","navigate","merge","onLongPress","selected","tabBarAccessibilityLabel","tabBarTestID","flex","color"],"sources":["C:/Users/kasthuri/Desktop/roomarch/roomarch/src/containers/HomeScreen.js"],"sourcesContent":["import { View, Text, TouchableOpacity  } from 'react-native'\r\nimport React from 'react'\r\n\r\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\n\r\n\r\nconst HomeScreen = () => {\r\n\r\nconst Tab = createBottomTabNavigator();\r\n\r\n  return (\r\n      \r\n      <View style={{ flexDirection: 'row' }}>\r\n      {state.routes.map((route, index) => {\r\n        const { options } = descriptors[route.key];\r\n        const label =\r\n          options.tabBarLabel !== undefined\r\n            ? options.tabBarLabel\r\n            : options.title !== undefined\r\n            ? options.title\r\n            : route.name;\r\n\r\n        const isFocused = state.index === index;\r\n\r\n        const onPress = () => {\r\n          const event = navigation.emit({\r\n            type: 'tabPress',\r\n            target: route.key,\r\n            canPreventDefault: true,\r\n          });\r\n\r\n          if (!isFocused && !event.defaultPrevented) {\r\n            // The `merge: true` option makes sure that the params inside the tab screen are preserved\r\n            navigation.navigate({ name: route.name, merge: true });\r\n          }\r\n        };\r\n\r\n        const onLongPress = () => {\r\n          navigation.emit({\r\n            type: 'tabLongPress',\r\n            target: route.key,\r\n          });\r\n        };\r\n\r\n        return (\r\n          <TouchableOpacity\r\n            accessibilityRole=\"button\"\r\n            accessibilityState={isFocused ? { selected: true } : {}}\r\n            accessibilityLabel={options.tabBarAccessibilityLabel}\r\n            testID={options.tabBarTestID}\r\n            onPress={onPress}\r\n            onLongPress={onLongPress}\r\n            style={{ flex: 1 }}\r\n          >\r\n            <Text style={{ color: isFocused ? '#673ab7' : '#222' }}>\r\n              {label}\r\n            </Text>\r\n          </TouchableOpacity>\r\n        );\r\n      })}\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default HomeScreen"],"mappings":";;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,wBAAT,QAAyC,+BAAzC;;;AAGA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;EAEzB,IAAMC,GAAG,GAAGF,wBAAwB,EAApC;EAEE,OAEI,KAAC,IAAD;IAAM,KAAK,EAAE;MAAEG,aAAa,EAAE;IAAjB,CAAb;IAAA,UACCC,KAAK,CAACC,MAAN,CAAaC,GAAb,CAAiB,UAACC,KAAD,EAAQC,KAAR,EAAkB;MAClC,IAAQC,OAAR,GAAoBC,WAAW,CAACH,KAAK,CAACI,GAAP,CAA/B,CAAQF,OAAR;MACA,IAAMG,KAAK,GACTH,OAAO,CAACI,WAAR,KAAwBC,SAAxB,GACIL,OAAO,CAACI,WADZ,GAEIJ,OAAO,CAACM,KAAR,KAAkBD,SAAlB,GACAL,OAAO,CAACM,KADR,GAEAR,KAAK,CAACS,IALZ;MAOA,IAAMC,SAAS,GAAGb,KAAK,CAACI,KAAN,KAAgBA,KAAlC;;MAEA,IAAMU,OAAO,GAAG,SAAVA,OAAU,GAAM;QACpB,IAAMC,KAAK,GAAGC,UAAU,CAACC,IAAX,CAAgB;UAC5BC,IAAI,EAAE,UADsB;UAE5BC,MAAM,EAAEhB,KAAK,CAACI,GAFc;UAG5Ba,iBAAiB,EAAE;QAHS,CAAhB,CAAd;;QAMA,IAAI,CAACP,SAAD,IAAc,CAACE,KAAK,CAACM,gBAAzB,EAA2C;UAEzCL,UAAU,CAACM,QAAX,CAAoB;YAAEV,IAAI,EAAET,KAAK,CAACS,IAAd;YAAoBW,KAAK,EAAE;UAA3B,CAApB;QACD;MACF,CAXD;;MAaA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;QACxBR,UAAU,CAACC,IAAX,CAAgB;UACdC,IAAI,EAAE,cADQ;UAEdC,MAAM,EAAEhB,KAAK,CAACI;QAFA,CAAhB;MAID,CALD;;MAOA,OACE,KAAC,gBAAD;QACE,iBAAiB,EAAC,QADpB;QAEE,kBAAkB,EAAEM,SAAS,GAAG;UAAEY,QAAQ,EAAE;QAAZ,CAAH,GAAwB,EAFvD;QAGE,kBAAkB,EAAEpB,OAAO,CAACqB,wBAH9B;QAIE,MAAM,EAAErB,OAAO,CAACsB,YAJlB;QAKE,OAAO,EAAEb,OALX;QAME,WAAW,EAAEU,WANf;QAOE,KAAK,EAAE;UAAEI,IAAI,EAAE;QAAR,CAPT;QAAA,UASE,KAAC,IAAD;UAAM,KAAK,EAAE;YAAEC,KAAK,EAAEhB,SAAS,GAAG,SAAH,GAAe;UAAjC,CAAb;UAAA,UACGL;QADH;MATF,EADF;IAeD,CA9CA;EADD,EAFJ;AAoDD,CAxDD;;AA0DA,eAAeX,UAAf"},"metadata":{},"sourceType":"module"}