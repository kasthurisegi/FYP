{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"enabled\", \"layout\", \"style\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nexport default React.forwardRef(function CardSheet(_ref, ref) {\n  var enabled = _ref.enabled,\n      layout = _ref.layout,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      fill = _React$useState2[0],\n      setFill = _React$useState2[1];\n\n  var _React$useState3 = React.useState('auto'),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      pointerEvents = _React$useState4[0],\n      setPointerEvents = _React$useState4[1];\n\n  React.useImperativeHandle(ref, function () {\n    return {\n      setPointerEvents: setPointerEvents\n    };\n  });\n  React.useEffect(function () {\n    if (typeof document === 'undefined' || !document.body) {\n      return;\n    }\n\n    var width = document.body.clientWidth;\n    var height = document.body.clientHeight;\n    setFill(width === layout.width && height === layout.height);\n  }, [layout.height, layout.width]);\n  return React.createElement(View, _extends({}, rest, {\n    pointerEvents: pointerEvents,\n    style: [enabled && fill ? styles.page : styles.card, style]\n  }));\n});\nvar styles = StyleSheet.create({\n  page: {\n    minHeight: '100%'\n  },\n  card: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["CardSheet.tsx"],"names":["rest","React","setPointerEvents","document","width","height","setFill","layout","enabled","styles","page","minHeight","card","flex","overflow"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAiBA,eAAe,KAAK,CAAL,UAAA,CAAsC,SAAA,SAAA,CAAA,IAAA,EAAA,GAAA,EAGnD;EAFA,IAAA,OAAA,GAEA,IAFA,CAAA,OAAA;EAAA,IAAA,MAAA,GAEA,IAFA,CAAA,MAAA;EAAA,IAAA,KAAA,GAEA,IAFA,CAAA,KAAA;EAAA,IAA6BA,IAA7B,4BAEA,IAFA;;EAGA,sBAAwBC,KAAK,CAALA,QAAAA,CADxB,KACwBA,CAAxB;EAAA;EAAA,IAAM,IAAN;EAAA,IAAM,OAAN;;EAGA,uBACEA,KAAK,CAALA,QAAAA,CADF,MACEA,CADF;EAAA;EAAA,IAAM,aAAN;EAAA,IAAM,gBAAN;;EAGAA,KAAK,CAALA,mBAAAA,CAAAA,GAAAA,EAA+B,YAAM;IACnC,OAAO;MAAEC,gBAAAA,EAAAA;IAAF,CAAP;EADFD,CAAAA;EAIAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,IAAI,OAAA,QAAA,KAAA,WAAA,IAAmC,CAACE,QAAQ,CAAhD,IAAA,EAAuD;MAErD;IACD;;IAED,IAAMC,KAAK,GAAGD,QAAQ,CAARA,IAAAA,CAAd,WAAA;IACA,IAAME,MAAM,GAAGF,QAAQ,CAARA,IAAAA,CAAf,YAAA;IAEAG,OAAO,CAACF,KAAK,KAAKG,MAAM,CAAhBH,KAAAA,IAA0BC,MAAM,KAAKE,MAAM,CAAnDD,MAAO,CAAPA;EATFL,CAAAA,EAUG,CAACM,MAAM,CAAP,MAAA,EAAgBA,MAAM,CAVzBN,KAUG,CAVHA;EAYA,OACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;IAEE,aAAa,EAFf,aAAA;IAGE,KAAK,EAAE,CAACO,OAAO,IAAPA,IAAAA,GAAkBC,MAAM,CAAxBD,IAAAA,GAAgCC,MAAM,CAAvC,IAAA,EAAA,KAAA;EAHT,CAAA,CAAA,CADF;AA1BF,CAAe,CAAf;AAmCA,IAAMA,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;EAC/BC,IAAI,EAAE;IACJC,SAAS,EAAE;EADP,CADyB;EAI/BC,IAAI,EAAE;IACJC,IAAI,EADA,CAAA;IAEJC,QAAQ,EAAE;EAFN;AAJyB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, ViewProps } from 'react-native';\n\ntype Props = ViewProps & {\n  enabled: boolean;\n  layout: { width: number; height: number };\n  children: React.ReactNode;\n};\n\nexport type CardSheetRef = {\n  setPointerEvents: React.Dispatch<ViewProps['pointerEvents']>;\n};\n\n// This component will render a page which overflows the screen\n// if the container fills the body by comparing the size\n// This lets the document.body handle scrolling of the content\n// It's necessary for mobile browsers to be able to hide address bar on scroll\nexport default React.forwardRef<CardSheetRef, Props>(function CardSheet(\n  { enabled, layout, style, ...rest },\n  ref\n) {\n  const [fill, setFill] = React.useState(false);\n  // To avoid triggering a rerender in Card during animation we had to move\n  // the state to CardSheet. The `setPointerEvents` is then hoisted back to the Card.\n  const [pointerEvents, setPointerEvents] =\n    React.useState<ViewProps['pointerEvents']>('auto');\n\n  React.useImperativeHandle(ref, () => {\n    return { setPointerEvents };\n  });\n\n  React.useEffect(() => {\n    if (typeof document === 'undefined' || !document.body) {\n      // Only run when DOM is available\n      return;\n    }\n\n    const width = document.body.clientWidth;\n    const height = document.body.clientHeight;\n\n    setFill(width === layout.width && height === layout.height);\n  }, [layout.height, layout.width]);\n\n  return (\n    <View\n      {...rest}\n      pointerEvents={pointerEvents}\n      style={[enabled && fill ? styles.page : styles.card, style]}\n    />\n  );\n});\n\nconst styles = StyleSheet.create({\n  page: {\n    minHeight: '100%',\n  },\n  card: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}