{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { memo, useCallback, useMemo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { RTL_DIRECTION, RTL_STYLE } from \"../constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction RenderBadge(_ref) {\n  var rtl = _ref.rtl,\n    label = _ref.label,\n    props = _ref.props,\n    value = _ref.value,\n    textStyle = _ref.textStyle,\n    badgeStyle = _ref.badgeStyle,\n    badgeTextStyle = _ref.badgeTextStyle,\n    badgeDotStyle = _ref.badgeDotStyle,\n    getBadgeColor = _ref.getBadgeColor,\n    getBadgeDotColor = _ref.getBadgeDotColor,\n    showBadgeDot = _ref.showBadgeDot,\n    onPress = _ref.onPress,\n    THEME = _ref.THEME;\n  var __onPress = useCallback(function () {\n    return onPress(value);\n  }, [onPress, value]);\n\n  var _badgeStyle = useMemo(function () {\n    return [RTL_DIRECTION(rtl, THEME.badgeStyle)].concat(_toConsumableArray([badgeStyle].flat()), [{\n      backgroundColor: getBadgeColor(value)\n    }]);\n  }, [THEME, rtl, badgeStyle, getBadgeColor]);\n\n  var _badgeDotStyle = useMemo(function () {\n    return [RTL_STYLE(rtl, THEME.badgeDotStyle)].concat(_toConsumableArray([badgeDotStyle].flat()), [{\n      backgroundColor: getBadgeDotColor(value)\n    }]);\n  }, [THEME, rtl, badgeDotStyle, getBadgeDotColor]);\n\n  var _badgeTextStyle = useMemo(function () {\n    return [].concat(_toConsumableArray([textStyle].flat()), _toConsumableArray([badgeTextStyle].flat()));\n  }, [textStyle, badgeTextStyle]);\n  return _jsxs(TouchableOpacity, _objectSpread(_objectSpread({\n    style: _badgeStyle\n  }, props), {}, {\n    onPress: __onPress,\n    children: [showBadgeDot && _jsx(View, {\n      style: _badgeDotStyle\n    }), _jsx(Text, {\n      style: _badgeTextStyle,\n      children: label\n    })]\n  }));\n}\nvar areEqual = function areEqual(nextProps, prevProps) {\n  if (nextProps.label !== prevProps.label) return false;\n  if (nextProps.value !== prevProps.value) return false;\n  if (nextProps.showBadgeDot !== prevProps.showBadgeDot) return false;\n  if (nextProps.rtl !== prevProps.rtl) return false;\n  if (nextProps.theme !== prevProps.theme) return false;\n  return true;\n};\nexport default memo(RenderBadge, areEqual);","map":{"version":3,"names":["React","memo","useCallback","useMemo","RTL_DIRECTION","RTL_STYLE","RenderBadge","rtl","label","props","value","textStyle","badgeStyle","badgeTextStyle","badgeDotStyle","getBadgeColor","getBadgeDotColor","showBadgeDot","onPress","THEME","__onPress","_badgeStyle","flat","backgroundColor","_badgeDotStyle","_badgeTextStyle","areEqual","nextProps","prevProps","theme"],"sources":["C:/Users/kasthuri/Desktop/roomarchh/FYP/node_modules/react-native-dropdown-picker/src/components/RenderBadgeItem.js"],"sourcesContent":["import React, {\r\n    memo, useCallback, useMemo\r\n} from 'react';\r\n\r\nimport {\r\n    View,\r\n    Text,\r\n    TouchableOpacity\r\n} from 'react-native';\r\n\r\nimport { RTL_DIRECTION, RTL_STYLE } from '../constants';\r\n\r\nfunction RenderBadge({\r\n    rtl,\r\n    label,\r\n    props,\r\n    value,\r\n    textStyle,\r\n    badgeStyle,\r\n    badgeTextStyle,\r\n    badgeDotStyle,\r\n    getBadgeColor,\r\n    getBadgeDotColor,\r\n    showBadgeDot,\r\n    onPress,\r\n    THEME\r\n}) {\r\n    /**\r\n     * onPress.\r\n     */\r\n    const __onPress = useCallback(() => onPress(value), [onPress, value]);\r\n\r\n    /**\r\n     * The badge style.\r\n     * @returns {object}\r\n     */\r\n    const _badgeStyle = useMemo(() => ([\r\n        RTL_DIRECTION(rtl, THEME.badgeStyle),\r\n        ...[badgeStyle].flat(), {\r\n            backgroundColor: getBadgeColor(value)\r\n        }\r\n    ]), [THEME, rtl, badgeStyle, getBadgeColor]);\r\n\r\n    /**\r\n     * The badge dot style.\r\n     * @return {object}\r\n     */\r\n    const _badgeDotStyle = useMemo(() => ([\r\n        RTL_STYLE(rtl, THEME.badgeDotStyle),\r\n        ...[badgeDotStyle].flat(), {\r\n            backgroundColor: getBadgeDotColor(value)\r\n        }\r\n    ]), [THEME, rtl, badgeDotStyle, getBadgeDotColor]);\r\n\r\n    /**\r\n     * The badge text style.\r\n     * @returns {object}\r\n     */\r\n    const _badgeTextStyle = useMemo(() => ([\r\n        ...[textStyle].flat(),\r\n        ...[badgeTextStyle].flat()\r\n    ]), [textStyle, badgeTextStyle]);\r\n\r\n    return (\r\n        <TouchableOpacity style={_badgeStyle} {...props} onPress={__onPress}>\r\n            {showBadgeDot && <View style={_badgeDotStyle} />}\r\n            <Text style={_badgeTextStyle}>{label}</Text>\r\n        </TouchableOpacity>\r\n    );\r\n}\r\n\r\nconst areEqual = (nextProps, prevProps) => {\r\n    if (nextProps.label !== prevProps.label)\r\n        return false;\r\n    if (nextProps.value !== prevProps.value)\r\n        return false;\r\n    if (nextProps.showBadgeDot !== prevProps.showBadgeDot)\r\n        return false;\r\n    if (nextProps.rtl !== prevProps.rtl)\r\n        return false;\r\n    if (nextProps.theme !== prevProps.theme)\r\n        return false;\r\n\r\n    return true;\r\n}\r\n\r\nexport default memo(RenderBadge, areEqual);"],"mappings":";;;;AAAA,OAAOA,KAAK,IACRC,IAAI,EAAEC,WAAW,EAAEC,OAAO,QACvB,OAAO;AAAC;AAAA;AAAA;AAQf,SAASC,aAAa,EAAEC,SAAS;AAAuB;AAAA;AAExD,SAASC,WAAW,OAcjB;EAAA,IAbCC,GAAG,QAAHA,GAAG;IACHC,KAAK,QAALA,KAAK;IACLC,KAAK,QAALA,KAAK;IACLC,KAAK,QAALA,KAAK;IACLC,SAAS,QAATA,SAAS;IACTC,UAAU,QAAVA,UAAU;IACVC,cAAc,QAAdA,cAAc;IACdC,aAAa,QAAbA,aAAa;IACbC,aAAa,QAAbA,aAAa;IACbC,gBAAgB,QAAhBA,gBAAgB;IAChBC,YAAY,QAAZA,YAAY;IACZC,OAAO,QAAPA,OAAO;IACPC,KAAK,QAALA,KAAK;EAKL,IAAMC,SAAS,GAAGlB,WAAW,CAAC;IAAA,OAAMgB,OAAO,CAACR,KAAK,CAAC;EAAA,GAAE,CAACQ,OAAO,EAAER,KAAK,CAAC,CAAC;;EAMrE,IAAMW,WAAW,GAAGlB,OAAO,CAAC;IAAA,QACxBC,aAAa,CAACG,GAAG,EAAEY,KAAK,CAACP,UAAU,CAAC,4BACjC,CAACA,UAAU,CAAC,CAACU,IAAI,EAAE,IAAE;MACpBC,eAAe,EAAER,aAAa,CAACL,KAAK;IACxC,CAAC;EAAA,CACH,EAAE,CAACS,KAAK,EAAEZ,GAAG,EAAEK,UAAU,EAAEG,aAAa,CAAC,CAAC;;EAM5C,IAAMS,cAAc,GAAGrB,OAAO,CAAC;IAAA,QAC3BE,SAAS,CAACE,GAAG,EAAEY,KAAK,CAACL,aAAa,CAAC,4BAChC,CAACA,aAAa,CAAC,CAACQ,IAAI,EAAE,IAAE;MACvBC,eAAe,EAAEP,gBAAgB,CAACN,KAAK;IAC3C,CAAC;EAAA,CACH,EAAE,CAACS,KAAK,EAAEZ,GAAG,EAAEO,aAAa,EAAEE,gBAAgB,CAAC,CAAC;;EAMlD,IAAMS,eAAe,GAAGtB,OAAO,CAAC;IAAA,oCACzB,CAACQ,SAAS,CAAC,CAACW,IAAI,EAAE,sBAClB,CAACT,cAAc,CAAC,CAACS,IAAI,EAAE;EAAA,CAC5B,EAAE,CAACX,SAAS,EAAEE,cAAc,CAAC,CAAC;EAEhC,OACI,MAAC,gBAAgB;IAAC,KAAK,EAAEQ;EAAY,GAAKZ,KAAK;IAAE,OAAO,EAAEW,SAAU;IAAA,WAC/DH,YAAY,IAAI,KAAC,IAAI;MAAC,KAAK,EAAEO;IAAe,EAAG,EAChD,KAAC,IAAI;MAAC,KAAK,EAAEC,eAAgB;MAAA,UAAEjB;IAAK,EAAQ;EAAA,GAC7B;AAE3B;AAEA,IAAMkB,QAAQ,GAAG,SAAXA,QAAQ,CAAIC,SAAS,EAAEC,SAAS,EAAK;EACvC,IAAID,SAAS,CAACnB,KAAK,KAAKoB,SAAS,CAACpB,KAAK,EACnC,OAAO,KAAK;EAChB,IAAImB,SAAS,CAACjB,KAAK,KAAKkB,SAAS,CAAClB,KAAK,EACnC,OAAO,KAAK;EAChB,IAAIiB,SAAS,CAACV,YAAY,KAAKW,SAAS,CAACX,YAAY,EACjD,OAAO,KAAK;EAChB,IAAIU,SAAS,CAACpB,GAAG,KAAKqB,SAAS,CAACrB,GAAG,EAC/B,OAAO,KAAK;EAChB,IAAIoB,SAAS,CAACE,KAAK,KAAKD,SAAS,CAACC,KAAK,EACnC,OAAO,KAAK;EAEhB,OAAO,IAAI;AACf,CAAC;AAED,eAAe5B,IAAI,CAACK,WAAW,EAAEoB,QAAQ,CAAC"},"metadata":{},"sourceType":"module"}